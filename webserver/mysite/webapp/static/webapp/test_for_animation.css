@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400..900&display=swap');
/* MERCURY */
body {
    min-height: 100vh;
    margin: 0;
    display: grid;
    place-items: center;
    background-image: url('STARRY.gif');
    background-repeat:repeat;
    perspective: 1000px; /* Add perspective for 3D effect */
    overflow: hidden;
    font-family:'Orbitron', sans-serif;
    color:white;
    position:relative;
    overflow-y: scroll;
    height:5000px;
}
div {
    transform-style: preserve-3d;
    box-sizing: border-box;
}
#solar_system {
    margin-top:350px;
    position: absolute;
    width: 100%;
    height: 500px;
}
#explain_box {
    position:absolute;
    top:1.5%;
    left:50%;
    transform:translate(-50%, -50%);
}
/* ORBITING CONTAINER - This element handles the revolution around a central point */
.MERCURY {
    /* Customize the orbit properties here */
    --orbit-radius: 100px; /* Distance from the orbit center */ /* ORBIT RADIUS */
    --orbit-speed: 6s;      /* Speed of the revolution */ /* ORBIT SPEED */
    --orbit-center-x: 50%;  /* X position of the orbit's center */ /* ORBIT X */
    --orbit-center-y: 50%;  /* Y position of the orbit's center */ /* ORBIT Y */
    
    position: absolute;
    top: var(--orbit-center-y);
    left: var(--orbit-center-x);
    transform-origin: 0 0;
    transform: translate(-50%, -50%); /* Center the container itself */
    animation: orbit-animation var(--orbit-speed) linear infinite;
}
/* GLOBE - This element is a child of the orbit container and handles its own rotation */
.mercury-globe {
    --r: 2; /* SPHERE RADIUS */
    --u: 1vmin;
    --h: 2px;
    
    border-radius: 50%;
    width: calc(var(--r) * var(--u) * 2);
    height: calc(var(--r) * var(--u) * 2);
    position: relative;
    
    /* Apply a slight initial rotation for a 3D view */
    transform: rotatex(45deg) rotatey(45deg);
    
    /* Customize the rotation speed here */
    --rotation-speed: 3000s;
    animation: none;
}
/* Styles for the inner lines of the globe */
.line {
    position: absolute;
    height: var(--h);
    border: 1px solid;
    
    --d: calc(var(--r) * var(--dp));
    --w: calc(2 * sqrt(pow(var(--r),2) - pow(var(--d), 2)) * var(--u));
    width: var(--w);
    top: calc(50% - (var(--d) * var(--s) * var(--u)));
    left: calc(50% - var(--w) / 2);
    color: #aaa5;
}
.radius {
    height: var(--h);
    --w: calc(var(--r) * var(--u) * 2);
    top: 50%;
}
.h, .v {
    --h: var(--w);
    border-radius: 100vmax;
    top: 0;
    left: 0;
    box-shadow: 0 0 1em 1em #0000;
}
.mercury-h {
    .h,
    .v {
        --h: var(--w);
        border-radius: 100vmax;
        background-color: rgba(74, 73, 73, 0.7); /* SPHERE COLOR */
        top: 0;
        left: 0;
        box-shadow: 0 0 1em 1em #0000;
    }
    translate: calc(var(--r) * var(--u) - var(--w) / 2) calc(var(--r) * var(--u) - var(--w) / 2) calc((var(--d) * var(--s) * var(--u)));
    --del: 0.5s; /* FLASH SPEED */
    animation: mercury-flash linear var(--del) infinite;
    animation-delay: calc(var(--c) * var(--del) / var(--t));
}
/* The horizontal lines are created with SCSS and a loop, which can be approximated with a set of elements */
/* For this example, we'll assume a single globe for simplicity, but you would duplicate the .line and .h elements
    in the HTML and adjust the --c variable to simulate the SCSS loop. */
/* Animation keyframes */
@keyframes mercury-flash {
    0%, 13.33% {
        color: rgba(200, 200, 200, 0.6);
        background-color: rgba(180, 180, 180, 0.6);
        box-shadow: 0 0 1em 0.1em #c6c6c630;
    }
    6.67% {
        color: rgba(220, 220, 220, 0.8);
        background-color: #cccccc99; /* FLASH COLOR */
        box-shadow: 0 0 1em 0.1em #cccccc60; /* PLANET GLOW */
    }
}
/* SUN */
/* ORBITING CONTAINER - This element handles the revolution around a central point */
.SUN {
    /* Customize the orbit properties here */
    --orbit-radius: 10px; /* Distance from the orbit center */ /* ORBIT RADIUS */
    --orbit-speed: 10s;      /* Speed of the revolution */ /* ORBIT SPEED */
    --orbit-center-x: 50%;  /* X position of the orbit's center */ /* ORBIT X */
    --orbit-center-y: 50%;  /* Y position of the orbit's center */ /* ORBIT Y */
    
    position: absolute;
    top: var(--orbit-center-y);
    left: var(--orbit-center-x);
    transform-origin: 0 0;
    transform: translate(-50%, -50%); /* Center the container itself */
    animation: none; /* Disabled because SUN == Unmoving Center */
}
/* GLOBE - This element is a child of the orbit container and handles its own rotation */
.sun-globe {
    --r: 10; /* SPHERE RADIUS */
    --u: 1vmin;
    --h: 2px;
    
    border-radius: 50%;
    width: calc(var(--r) * var(--u) * 2);
    height: calc(var(--r) * var(--u) * 2);
    position: relative;
    
    /* Apply a slight initial rotation for a 3D view */
    transform: rotatex(45deg) rotatey(45deg);
    
    /* Customize the rotation speed here */
    --rotation-speed: 30s;
    animation: rotates var(--rotation-speed) linear infinite;
}
/* Styles for the inner lines of the globe */
.sun-h {
    .h,
    .v {
        --h: var(--w);
        border-radius: 100vmax;
        background-color: rgba(255, 215, 0, 0.8); /* SPHERE COLOR */
        top: 0;
        left: 0;
        box-shadow: 0 0 1em 1em #0000;
    }
    translate: calc(var(--r) * var(--u) - var(--w) / 2) calc(var(--r) * var(--u) - var(--w) / 2) calc((var(--d) * var(--s) * var(--u)));
    --del: 0.5s; /* FLASH SPEED */
    animation: sun-flash linear var(--del) infinite;
    animation-delay: calc(var(--c) * var(--del) / var(--t));
}
/* The horizontal lines are created with SCSS and a loop, which can be approximated with a set of elements */
/* For this example, we'll assume a single globe for simplicity, but you would duplicate the .line and .h elements
    in the HTML and adjust the --c variable to simulate the SCSS loop. */
/* Animation keyframes */
@keyframes sun-flash {
    0%, 13.33% {
        color: rgba(255, 204, 0, 0.7); /* Brighter Orange-Yellow */
        background-color: rgba(255, 187, 0, 0.7); /* More intense Orange */
        box-shadow: 0 0 1em 0.1em #ffdd0030; /* Brighter Glow */
    }
    6.67% {
        color: rgba(255, 170, 0, 0.7); /* Even brighter Orange */
        background-color: #ff990099; /* Very Flashy Orange */
        box-shadow: 0 0 1em 0.1em #ffcc0060; /* More Intense Glow */
    }
}

/* VENUS */
/* ORBITING CONTAINER - This element handles the revolution around a central point */
.VENUS {
    /* Customize the orbit properties here */
    --orbit-radius: 150px; /* Distance from the orbit center */ /* ORBIT RADIUS */
    --orbit-speed: 9s;      /* Speed of the revolution */ /* ORBIT SPEED */
    --orbit-center-x: 50%;  /* X position of the orbit's center */ /* ORBIT X */
    --orbit-center-y: 50%;  /* Y position of the orbit's center */ /* ORBIT Y */
    
    position: absolute;
    top: var(--orbit-center-y);
    left: var(--orbit-center-x);
    transform-origin: 0 0;
    transform: translate(-50%, -50%); /* Center the container itself */
    animation: orbit-animation var(--orbit-speed) linear infinite;
}
/* GLOBE - This element is a child of the orbit container and handles its own rotation */
.venus-globe {
    --r: 2; /* SPHERE RADIUS */
    --u: 1vmin;
    --h: 2px;
    
    border-radius: 50%;
    width: calc(var(--r) * var(--u) * 2);
    height: calc(var(--r) * var(--u) * 2);
    position: relative;
    
    /* Apply a slight initial rotation for a 3D view */
    transform: rotatex(45deg) rotatey(45deg);
    
    /* Customize the rotation speed here */
    --rotation-speed: 30s;
    animation: none;
}
/* Styles for the inner lines of the globe */
.venus-h {
    .h,
    .v {
        --h: var(--w);
        border-radius: 100vmax;
        background-color: rgba(255, 179, 102, 0.7); /* SPHERE COLOR */
        top: 0;
        left: 0;
        box-shadow: 0 0 1em 1em #ffe5b800;
    }
    translate: calc(var(--r) * var(--u) - var(--w) / 2) calc(var(--r) * var(--u) - var(--w) / 2) calc((var(--d) * var(--s) * var(--u)));
    --del: 0.5s; /* FLASH SPEED */
    animation: venus-flash linear var(--del) infinite;
    animation-delay: calc(var(--c) * var(--del) / var(--t));
}
/* The horizontal lines are created with SCSS and a loop, which can be approximated with a set of elements */
/* For this example, we'll assume a single globe for simplicity, but you would duplicate the .line and .h elements
    in the HTML and adjust the --c variable to simulate the SCSS loop. */
/* Animation keyframes */
@keyframes venus-flash {
    0%, 13.33% {
        color: rgba(255, 204, 153, 0.6);
        background-color: rgba(255, 179, 102, 0.6);
        box-shadow: 0 0 1em 0.1em #ffcc9930;
    }
    6.67% {
        color: rgba(255, 196, 128, 0.7);
        background-color: #ffb36699; /* FLASH COLOR */
        box-shadow: 0 0 1em 0.1em #ffcc9960; /* PLANET GLOW */
    }
}
/* EARTH */
/* ORBITING CONTAINER - This element handles the revolution around a central point */
.EARTH {
    /* Customize the orbit properties here */
    --orbit-radius: 200px; /* Distance from the orbit center */ /* ORBIT RADIUS */
    --orbit-speed: 12s;      /* Speed of the revolution */ /* ORBIT SPEED */
    --orbit-center-x: 50%;  /* X position of the orbit's center */ /* ORBIT X */
    --orbit-center-y: 50%;  /* Y position of the orbit's center */ /* ORBIT Y */
    
    position: absolute;
    top: var(--orbit-center-y);
    left: var(--orbit-center-x);
    transform-origin: 0 0;
    transform: translate(-50%, -50%); /* Center the container itself */
    animation: orbit-animation var(--orbit-speed) linear infinite;
}
/* GLOBE - This element is a child of the orbit container and handles its own rotation */
.earth-globe {
    --r: 2; /* SPHERE RADIUS */
    --u: 1vmin;
    --h: 2px;
    
    border-radius: 50%;
    width: calc(var(--r) * var(--u) * 2);
    height: calc(var(--r) * var(--u) * 2);
    position: relative;
    
    /* Apply a slight initial rotation for a 3D view */
    transform: rotatex(45deg) rotatey(45deg);
    
    /* Customize the rotation speed here */
    --rotation-speed: 30s;
    animation: none;
}
/* Styles for the inner lines of the globe */
.earth-h {
    .h,
    .v {
        --h: var(--w);
        border-radius: 100vmax;
        background-color: rgba(65, 105, 225, 0.7); /* SPHERE COLOR (Ocean Blue) */
        top: 0;
        left: 0;
        box-shadow: 0 0 1em 1em #0000;
    }
    translate: calc(var(--r) * var(--u) - var(--w) / 2) calc(var(--r) * var(--u) - var(--w) / 2) calc((var(--d) * var(--s) * var(--u)));
    --del: 0.5s; /* FLASH SPEED */
    animation: earth-flash linear var(--del) infinite;
    animation-delay: calc(var(--c) * var(--del) / var(--t));
}
/* The horizontal lines are created with SCSS and a loop, which can be approximated with a set of elements */
/* For this example, we'll assume a single globe for simplicity, but you would duplicate the .line and .h elements
    in the HTML and adjust the --c variable to simulate the SCSS loop. */
/* Animation keyframes */
@keyframes earth-flash {
    0%, 13.33% {
        color: rgba(0, 255, 0, 0.6); /* Forest Green */
        background-color: rgba(65, 105, 225, 0.6); /* Royal Blue */
        box-shadow: 0 0 1em 0.1em #00640030; /* Dark Green Glow */
    }
    6.67% {
        color: rgba(47, 188, 47, 0.8); /* More Opaque Green */
        background-color: #4169e199; /* Flashy Blue */
        box-shadow: 0 0 1em 0.1em #228b2260; /* Brighter Green Glow */
    }
}
/* MARS */
/* ORBITING CONTAINER - This element handles the revolution around a central point */
.MARS {
    /* Customize the orbit properties here */
    --orbit-radius: 250px; /* Distance from the orbit center */ /* ORBIT RADIUS */
    --orbit-speed: 15s;      /* Speed of the revolution */ /* ORBIT SPEED */
    --orbit-center-x: 50%;  /* X position of the orbit's center */ /* ORBIT X */
    --orbit-center-y: 50%;  /* Y position of the orbit's center */ /* ORBIT Y */
    
    position: absolute;
    top: var(--orbit-center-y);
    left: var(--orbit-center-x);
    transform-origin: 0 0;
    transform: translate(-50%, -50%); /* Center the container itself */
    animation: orbit-animation var(--orbit-speed) linear infinite;
}
/* GLOBE - This element is a child of the orbit container and handles its own rotation */
.mars-globe {
    --r: 2; /* SPHERE RADIUS */
    --u: 1vmin;
    --h: 2px;
    
    border-radius: 50%;
    width: calc(var(--r) * var(--u) * 2);
    height: calc(var(--r) * var(--u) * 2);
    position: relative;
    
    /* Apply a slight initial rotation for a 3D view */
    transform: rotatex(45deg) rotatey(45deg);
    
    /* Customize the rotation speed here */
    --rotation-speed: 30s;
    animation: none;
}
/* Styles for the inner lines of the globe */
.mars-h {
    .h,
    .v {
        --h: var(--w);
        border-radius: 100vmax;
        background-color: rgba(255, 39, 39, 0.7); /* SPHERE COLOR */
        top: 0;
        left: 0;
        box-shadow: 0 0 1em 1em #ffe5b800;
    }
    translate: calc(var(--r) * var(--u) - var(--w) / 2) calc(var(--r) * var(--u) - var(--w) / 2) calc((var(--d) * var(--s) * var(--u)));
    --del: 0.5s; /* FLASH SPEED */
    animation: mars-flash linear var(--del) infinite;
    animation-delay: calc(var(--c) * var(--del) / var(--t));
}
/* The horizontal lines are created with SCSS and a loop, which can be approximated with a set of elements */
/* For this example, we'll assume a single globe for simplicity, but you would duplicate the .line and .h elements
    in the HTML and adjust the --c variable to simulate the SCSS loop. */
/* Animation keyframes */
@keyframes mars-flash {
    0%, 13.33% {
        color: rgba(255, 59, 59, 0.2);
        background-color: rgba(255, 106, 106, 0.2);
        box-shadow: 0 0 1em 0.1em #ffffff00;
    }
    6.67% {
        color: rgba(255, 108, 108, 0.2);
        background-color: #ff6b6b81; /* FLASH COLOR */
        box-shadow: 0 0 1em 0.1em #ff646430; /* PLANET GLOW */
    }
}

/* JUPITER */
/* ORBITING CONTAINER - This element handles the revolution around a central point */
.JUPITER {
    /* Customize the orbit properties here */
    --orbit-radius: 300px; /* Distance from the orbit center */ /* ORBIT RADIUS */
    --orbit-speed: 18s;      /* Speed of the revolution */ /* ORBIT SPEED */
    --orbit-center-x: 50%;  /* X position of the orbit's center */ /* ORBIT X */
    --orbit-center-y: 50%;  /* Y position of the orbit's center */ /* ORBIT Y */
    
    position: absolute;
    top: var(--orbit-center-y);
    left: var(--orbit-center-x);
    transform-origin: 0 0;
    transform: translate(-50%, -50%); /* Center the container itself */
    animation: orbit-animation var(--orbit-speed) linear infinite;
}
/* GLOBE - This element is a child of the orbit container and handles its own rotation */
.jupiter-globe {
    --r: 2; /* SPHERE RADIUS */
    --u: 1vmin;
    --h: 2px;
    
    border-radius: 50%;
    width: calc(var(--r) * var(--u) * 2);
    height: calc(var(--r) * var(--u) * 2);
    position: relative;
    
    /* Apply a slight initial rotation for a 3D view */
    transform: rotatex(45deg) rotatey(45deg);
    
    /* Customize the rotation speed here */
    --rotation-speed: 30s;
    animation: none;
}
/* Styles for the inner lines of the globe */
.jupiter-h {
    .h,
    .v {
        --h: var(--w);
        border-radius: 100vmax;
        background-color: rgba(255, 161, 66, 0.7); /* SPHERE COLOR (Tan-Orange) */
        top: 0;
        left: 0;
        box-shadow: 0 0 1em 1em #0000;
    }
    translate: calc(var(--r) * var(--u) - var(--w) / 2) calc(var(--r) * var(--u) - var(--w) / 2) calc((var(--d) * var(--s) * var(--u)));
    --del: 0.5s; /* FLASH SPEED */
    animation: jupiter-flash linear var(--del) infinite;
    animation-delay: calc(var(--c) * var(--del) / var(--t));
}
/* The horizontal lines are created with SCSS and a loop, which can be approximated with a set of elements */
/* For this example, we'll assume a single globe for simplicity, but you would duplicate the .line and .h elements
    in the HTML and adjust the --c variable to simulate the SCSS loop. */
/* Animation keyframes */
@keyframes jupiter-flash {
    0%, 13.33% {
        color: rgba(240, 200, 160, 0.6); /* Lighter Tan */
        background-color: rgba(180, 120, 70, 0.6); /* Darker Orange */
        box-shadow: 0 0 1em 0.1em #8b451330; /* Saddle Brown Glow */
    }
    6.67% {
        color: rgba(255, 100, 100, 0.8); /* Red for the Great Red Spot */
        background-color: #d2691e99; /* Chocolate Brown Flash */
        box-shadow: 0 0 1em 0.1em #a52a2a60; /* Brown Glow */
    }
}

/* SATURNE */
/* ORBITING CONTAINER - This element handles the revolution around a central point */
.SATURNE {
    /* Customize the orbit properties here */
    --orbit-radius: 350px; /* Distance from the orbit center */ /* ORBIT RADIUS */
    --orbit-speed: 21s;      /* Speed of the revolution */ /* ORBIT SPEED */
    --orbit-center-x: 50%;  /* X position of the orbit's center */ /* ORBIT X */
    --orbit-center-y: 50%;  /* Y position of the orbit's center */ /* ORBIT Y */
    
    position: absolute;
    top: var(--orbit-center-y);
    left: var(--orbit-center-x);
    transform-origin: 0 0;
    transform: translate(-50%, -50%); /* Center the container itself */
    animation: orbit-animation var(--orbit-speed) linear infinite;
}
/* GLOBE - This element is a child of the orbit container and handles its own rotation */
.saturne-globe {
    --r: 2; /* SPHERE RADIUS */
    --u: 1vmin;
    --h: 2px;
    
    border-radius: 50%;
    width: calc(var(--r) * var(--u) * 2);
    height: calc(var(--r) * var(--u) * 2);
    position: relative;
    
    /* Apply a slight initial rotation for a 3D view */
    transform: rotatex(45deg) rotatey(45deg);
    
    /* Customize the rotation speed here */
    --rotation-speed: 30s;
    animation: none;
}
.saturne-h {
    .h,
    .v {
        --h: var(--w);
        border-radius: 100vmax;
        background-color: rgba(210, 180, 140, 0.7); /* SPHERE COLOR (Light Tan-Gold) */
        top: 0;
        left: 0;
        box-shadow: 0 0 1em 1em #0000;
    }
    translate: calc(var(--r) * var(--u) - var(--w) / 2) calc(var(--r) * var(--u) - var(--w) / 2) calc((var(--d) * var(--s) * var(--u)));
    --del: 0.5s; /* FLASH SPEED */
    animation: saturne-flash linear var(--del) infinite;
    animation-delay: calc(var(--c) * var(--del) / var(--t));
}
/* The horizontal lines are created with SCSS and a loop, which can be approximated with a set of elements */
/* For this example, we'll assume a single globe for simplicity, but you would duplicate the .line and .h elements
    in the HTML and adjust the --c variable to simulate the SCSS loop. */
/* Animation keyframes */
@keyframes saturne-flash {
    0%, 13.33% {
        color: rgba(240, 230, 140, 0.6); /* Pale Goldenrod */
        background-color: rgba(218, 165, 32, 0.6); /* Goldenrod */
        box-shadow: 0 0 1em 0.1em #ffd70030; /* Gold Glow */
    }
    6.67% {
        color: rgba(255, 255, 255, 0.8); /* White Flash */
        background-color: #f5deb399; /* Wheat Flash */
        box-shadow: 0 0 1em 0.1em #f5f5dc60; /* Beige Glow */
    }
}

/* URANUS */
/* ORBITING CONTAINER - This element handles the revolution around a central point */
.URANUS {
    /* Customize the orbit properties here */
    --orbit-radius: 400px; /* Distance from the orbit center */ /* ORBIT RADIUS */
    --orbit-speed: 24s;      /* Speed of the revolution */ /* ORBIT SPEED */
    --orbit-center-x: 50%;  /* X position of the orbit's center */ /* ORBIT X */
    --orbit-center-y: 50%;  /* Y position of the orbit's center */ /* ORBIT Y */
    
    position: absolute;
    top: var(--orbit-center-y);
    left: var(--orbit-center-x);
    transform-origin: 0 0;
    transform: translate(-50%, -50%); /* Center the container itself */
    animation: orbit-animation var(--orbit-speed) linear infinite;
}
/* GLOBE - This element is a child of the orbit container and handles its own rotation */
.uranus-globe {
    --r: 2; /* SPHERE RADIUS */
    --u: 1vmin;
    --h: 2px;
    
    border-radius: 50%;
    width: calc(var(--r) * var(--u) * 2);
    height: calc(var(--r) * var(--u) * 2);
    position: relative;
    
    /* Apply a slight initial rotation for a 3D view */
    transform: rotatex(45deg) rotatey(45deg);
    
    /* Customize the rotation speed here */
    --rotation-speed: 30s;
    animation: none;
}
/* Styles for the inner lines of the globe */
.uranus-h {
    .h,
    .v {
        --h: var(--w);
        border-radius: 100vmax;
        background-color: rgba(135, 206, 235, 0.7); /* SPHERE COLOR (Light Sky Blue) */
        top: 0;
        left: 0;
        box-shadow: 0 0 1em 1em #0000;
    }
    translate: calc(var(--r) * var(--u) - var(--w) / 2) calc(var(--r) * var(--u) - var(--w) / 2) calc((var(--d) * var(--s) * var(--u)));
    --del: 0.5s; /* FLASH SPEED */
    animation: uranus-flash linear var(--del) infinite;
    animation-delay: calc(var(--c) * var(--del) / var(--t));
}
/* The horizontal lines are created with SCSS and a loop, which can be approximated with a set of elements */
/* For this example, we'll assume a single globe for simplicity, but you would duplicate the .line and .h elements
    in the HTML and adjust the --c variable to simulate the SCSS loop. */
/* Animation keyframes */
@keyframes uranus-flash {
    0%, 13.33% {
        color: rgba(0, 191, 255, 0.6); /* Deep Sky Blue */
        background-color: rgba(0, 255, 255, 0.6); /* Cyan */
        box-shadow: 0 0 1em 0.1em #87ceeb30; /* Sky Blue Glow */
    }
    6.67% {
        color: rgba(0, 206, 209, 0.8); /* Dark Cyan */
        background-color: #40e0d099; /* Turquoise */
        box-shadow: 0 0 1em 0.1em #20b2aa60; /* Light Sea Green Glow */
    }
}

/* NEPTUNE */
/* ORBITING CONTAINER - This element handles the revolution around a central point */
.NEPTUNE {
    /* Customize the orbit properties here */
    --orbit-radius: 450px; /* Distance from the orbit center */ /* ORBIT RADIUS */
    --orbit-speed: 27s;      /* Speed of the revolution */ /* ORBIT SPEED */
    --orbit-center-x: 50%;  /* X position of the orbit's center */ /* ORBIT X */
    --orbit-center-y: 50%;  /* Y position of the orbit's center */ /* ORBIT Y */
    
    position: absolute;
    top: var(--orbit-center-y);
    left: var(--orbit-center-x);
    transform-origin: 0 0;
    transform: translate(-50%, -50%); /* Center the container itself */
    animation: orbit-animation var(--orbit-speed) linear infinite;
}
/* GLOBE - This element is a child of the orbit container and handles its own rotation */
.neptune-globe {
    --r: 2; /* SPHERE RADIUS */
    --u: 1vmin;
    --h: 2px;
    
    border-radius: 50%;
    width: calc(var(--r) * var(--u) * 2);
    height: calc(var(--r) * var(--u) * 2);
    position: relative;
    
    /* Apply a slight initial rotation for a 3D view */
    transform: rotatex(45deg) rotatey(45deg);
    
    /* Customize the rotation speed here */
    --rotation-speed: 30s;
    animation: none;
}
/* Styles for the inner lines of the globe */
.neptune-h {
    .h,
    .v {
        --h: var(--w);
        border-radius: 100vmax;
        background-color: rgba(30, 144, 255, 0.7); /* SPHERE COLOR (Dodge Blue) */
        top: 0;
        left: 0;
        box-shadow: 0 0 1em 1em #0000;
    }
    translate: calc(var(--r) * var(--u) - var(--w) / 2) calc(var(--r) * var(--u) - var(--w) / 2) calc((var(--d) * var(--s) * var(--u)));
    --del: 0.5s; /* FLASH SPEED */
    animation: neptune-flash linear var(--del) infinite;
    animation-delay: calc(var(--c) * var(--del) / var(--t));
}
/* The horizontal lines are created with SCSS and a loop, which can be approximated with a set of elements */
/* For this example, we'll assume a single globe for simplicity, but you would duplicate the .line and .h elements
    in the HTML and adjust the --c variable to simulate the SCSS loop. */
/* Animation keyframes */
@keyframes neptune-flash {
    0%, 13.33% {
        color: rgba(0, 0, 139, 0.6); /* Dark Blue */
        background-color: rgba(0, 0, 205, 0.6); /* Medium Blue */
        box-shadow: 0 0 1em 0.1em #1e90ff30; /* Dodge Blue Glow */
    }
    6.67% {
        color: rgba(0, 0, 255, 0.8); /* Pure Blue */
        background-color: #4169e199; /* Royal Blue */
        box-shadow: 0 0 1em 0.1em #4682b460; /* Steel Blue Glow */
    }
}

/* MOON */
/* ORBITING CONTAINER - This element handles the revolution around a central point */
.MOON {
    /* Customize the orbit properties here */
    --orbit-radius: 35px; /* Distance from the orbit center */ /* ORBIT RADIUS */
    --orbit-speed: 1s;      /* Speed of the revolution */ /* ORBIT SPEED */
    --orbit-center-x: 50%;  /* X position of the orbit's center */ /* ORBIT X */
    --orbit-center-y: 50%;  /* Y position of the orbit's center */ /* ORBIT Y */
    
    position: absolute;
    top: var(--orbit-center-y);
    left: var(--orbit-center-x);
    transform-origin: 0 0;
    transform: translate(-50%, -50%); /* Center the container itself */
    animation: orbit-animation var(--orbit-speed) linear infinite;
}
/* GLOBE - This element is a child of the orbit container and handles its own rotation */
.moon-globe {
    --r: 0.75; /* SPHERE RADIUS */
    --u: 1vmin;
    --h: 2px;
    
    border-radius: 50%;
    width: calc(var(--r) * var(--u) * 2);
    height: calc(var(--r) * var(--u) * 2);
    position: relative;
    
    /* Apply a slight initial rotation for a 3D view */
    transform: rotatex(45deg) rotatey(45deg);
    
    /* Customize the rotation speed here */
    --rotation-speed: 30s;
    animation: none;
}
/* Styles for the inner lines of the globe */
.moon-h {
    .h,
    .v {
        --h: var(--w);
        border-radius: 100vmax;
        background-color: rgba(221, 219, 219, 0.7); /* SPHERE COLOR (Dodge Blue) */
        top: 0;
        left: 0;
        box-shadow: 0 0 1em 1em #0000;
    }
    translate: calc(var(--r) * var(--u) - var(--w) / 2) calc(var(--r) * var(--u) - var(--w) / 2) calc((var(--d) * var(--s) * var(--u)));
    --del: 0.5s; /* FLASH SPEED */
    animation: moon-flash linear var(--del) infinite;
    animation-delay: calc(var(--c) * var(--del) / var(--t));
}
/* The horizontal lines are created with SCSS and a loop, which can be approximated with a set of elements */
/* For this example, we'll assume a single globe for simplicity, but you would duplicate the .line and .h elements
    in the HTML and adjust the --c variable to simulate the SCSS loop. */
/* Animation keyframes */
@keyframes moon-flash {
    0%, 13.33% {
        color: rgba(140, 139, 139, 0.6); /* Dark Blue */
        background-color: rgba(255, 255, 255, 0.6); /* Medium Blue */
        box-shadow: 0 0 1em 0.1em #1e90ff30; /* Dodge Blue Glow */
    }
    6.67% {
        color: rgba(255, 255, 255, 0.8); /* Pure Blue */
        background-color: #4169e199; /* Royal Blue */
        box-shadow: 0 0 1em 0.1em #ffffff60; /* Steel Blue Glow */
    }
}
@keyframes rotates {
    from {
        transform: 
            rotatex(0)
            rotatey(0)
            rotatez(0);
    }
    to {
        transform: 
            rotatex(0deg)
            rotatey(720deg)
            rotatez(0deg);
    }
}

@keyframes orbit-animation {
    from {
        transform: rotate(0deg) translate(calc(var(--orbit-radius) * -1), 0);
    }
    to {
        transform: rotate(360deg) translate(calc(var(--orbit-radius) * -1), 0);
    }
}
#asteroid-trail {
    position: relative;
    width: 100%;
    height: 100vh;
}

.trail {
    position: absolute;
    font-size: 5px;
    font-family: sans-serif;
    font-weight: bolder;
    color: white;
    transform: translate(-50%, -50%); /* Start centered on its creation point */
    animation: fade-and-move 5s linear forwards;
}

@keyframes fade-and-move {
    from {
        opacity: 1;
        transform: translate(-50%, -50%) scale(1); /* Starting point */
    }
    to {
        opacity: 0;
        transform: translate(-50%, -100px) scale(0.5); /* Fades out as it moves up and shrinks */
    }
}
#ASTEROID {
    opacity:0.4;
    width:553px;
    height:auto;
    position:absolute;
    top:50%;
    left:50%;
    transform:translate(-50%, -50%);
}
@keyframes rotate-image {
    from {
        transform: translate(-50%, -50%) rotate(0deg);
    }
    to {
        transform: translate(-50%, -50%) rotate(360deg);
    }
}
@keyframes rotate-mercury {
    from {
        transform: translate(-50%, -50%) rotate(30deg);
    }
    to {
        transform: translate(-50%, -50%) rotate(390deg);
    }
}
@keyframes rotate-venus {
    from {
        transform: translate(-50%, -50%) rotate(35deg);
    }
    to {
        transform: translate(-50%, -50%) rotate(395deg);
    }
}
@keyframes rotate-earth {
    from {
        transform: translate(-50%, -50%) rotate(128deg);
    }
    to {
        transform: translate(-50%, -50%) rotate(488deg);
    }
}
@keyframes rotate-mars {
    from {
        transform: translate(-50%, -50%) rotate(39.5deg);
    }
    to {
        transform: translate(-50%, -50%) rotate(399.5deg);
    }
}
@keyframes rotate-jupiter {
    from {
        transform: translate(-50%, -50%) rotate(40.25deg);
    }
    to {
        transform: translate(-50%, -50%) rotate(400.25deg);
    }
}
@keyframes rotate-saturne {
    from {
        transform: translate(-50%, -50%) rotate(41deg);
    }
    to {
        transform: translate(-50%, -50%) rotate(401deg);
    }
}
@keyframes rotate-uranus {
    from {
        transform: translate(-50%, -50%) rotate(42deg);
    }
    to {
        transform: translate(-50%, -50%) rotate(402deg);
    }
}
@keyframes rotate-neptune {
    from {
        transform: translate(-50%, -50%) rotate(42deg);
    }
    to {
        transform: translate(-50%, -50%) rotate(402deg);
    }
}
@keyframes rotate-moon {
    from {
        transform: translate(-50%, -50%) rotate(38deg);
    }
    to {
        transform: translate(-50%, -50%) rotate(398deg);
    }
}
.ASTEROID {
    animation: rotate-image 90s linear infinite;
}
/* MERCURY TRAIL */
#mercury_trail {
    animation: rotate-mercury 6s linear infinite;
    position:absolute;
    top:50%;
    left:50%;
    transform:translate(-50%, -50%);
    height:180px;
    width:180px;
    border-color: transparent transparent white transparent;
    border-radius:50%;
    border-width: 0 0 0.1em 0.1em;
    border-style: solid;
}
/* VENUS TRAIL */
#venus_trail {
    animation: rotate-venus 9s linear infinite;
    position:absolute;
    top:50%;
    left:50%;
    transform:translate(-50%, -50%);
    height:280px;
    width:280px;
    border-color: transparent transparent white transparent;
    border-radius:50%;
    border-width: 0 0 0.1em 0.1em;
    border-style: solid;
}
/* EARTH TRAIL */
#earth_trail {
    animation: rotate-earth 12s linear infinite;
    position:absolute;
    top:50%;
    left:50%;
    transform:translate(-50%, -50%);
    height:380px;
    width:380px;
    border-color: transparent white transparent transparent;
    border-radius:50%;
    border-width: 0 0.1em 0.1em 0; /* Note: The original had different border widths */
    border-style: solid;
}
/* MARS TRAIL */
#mars_trail {
    animation: rotate-mars 15s linear infinite;
    position:absolute;
    top:50%;
    left:50%;
    transform:translate(-50%, -50%);
    height:480px;
    width:480px;
    border-color: transparent transparent white transparent;
    border-radius:50%;
    border-width: 0 0 0.1em 0.1em;
    border-style: solid;
}
/* JUPITER TRAIL */
#jupiter_trail {
    animation: rotate-jupiter 18s linear infinite;
    position:absolute;
    top:50%;
    left:50%;
    transform:translate(-50%, -50%);
    height:580px;
    width:580px;
    border-color: transparent transparent white transparent;
    border-radius:50%;
    border-width: 0 0 0.1em 0.1em;
    border-style: solid;
}
/* SATURN TRAIL */
#saturne_trail {
    animation: rotate-saturne 21s linear infinite;
    position:absolute;
    top:50%;
    left:50%;
    transform:translate(-50%, -50%);
    height:680px;
    width:680px;
    border-color: transparent transparent white transparent;
    border-radius:50%;
    border-width: 0 0 0.1em 0.1em;
    border-style: solid;
}
/* URANUS TRAIL */
#uranus_trail {
    animation: rotate-uranus 24s linear infinite;
    position:absolute;
    top:50%;
    left:50%;
    transform:translate(-50%, -50%);
    height:780px;
    width:780px;
    border-color: transparent transparent white transparent;
    border-radius:50%;
    border-width: 0 0 0.1em 0.1em;
    border-style: solid;
}
/* NEPTUNE TRAIL */
#neptune_trail {
    animation: rotate-neptune 27s linear infinite;
    position:absolute;
    top:50%;
    left:50%;
    transform:translate(-50%, -50%);
    height:880px;
    width:880px;
    border-color: transparent transparent white transparent;
    border-radius:50%;
    border-width: 0 0 0.1em 0.1em;
    border-style: solid;
}
/* MOON TRAIL */
#moon_trail {
    animation: rotate-moon 1s linear infinite;
    position:absolute;
    top:50%;
    left:50%;
    transform:translate(-50%, -50%);
    height:60px;
    width:60px;
    border-color: transparent transparent white transparent;
    border-radius:50%;
    border-width: 0 0 0.1em 0.1em;
    border-style: solid;
}